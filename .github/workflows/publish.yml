name: 🚀 Publish to NPM

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送任何以 v 开头的标签

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Run Tests
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🧪 Run unit tests
        run: npm run test:unit
        
      - name: ⚡ Run quick tests  
        run: npm run test:quick

  publish:
    needs: test
    runs-on: ubuntu-latest
    name: 📦 Publish to NPM
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: 📋 Install dependencies
        run: npm ci
        
      - name: 🏷️ Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: 📝 Update package.json version
        run: npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version
        
      - name: 🚀 Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: 🎉 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## 🚀 Release ${{ steps.get_version.outputs.VERSION }}
            
            ### 📦 NPM Package
            ```bash
            npm install taiga-mcp-server@${{ steps.get_version.outputs.VERSION }}
            npx taiga-mcp-server
            ```
            
            ### ✨ Features
            - 13 MCP tools across 6 functional categories
            - Complete Sprint and Issue management  
            - Modular ES6 architecture
            - Professional testing framework
            
            ### 🛠️ Technical Stack
            - Node.js ES modules
            - MCP protocol over stdio
            - Comprehensive test coverage
            - AI-assisted development
            
            ---
            **Created by:** Greddy (greddy7574@gmail.com)  
            **AI Development Partner:** Claude Code
          draft: false
          prerelease: false